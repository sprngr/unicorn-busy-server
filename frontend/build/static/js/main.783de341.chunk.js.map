{"version":3,"sources":["components/status/Status.tsx","components/statusButton/StatusButton.tsx","components/app/App.tsx","serviceWorker.js","index.tsx"],"names":["Status","props","className","status","style","backgroundColor","rgb","red","green","blue","StatusButton","onClick","callApi","apiUrl","text","App","timer","React","useState","setStatus","setRgb","overwritten","setStatusOverwritten","fetchStatus","a","fetch","data","ok","json","statusInfo","statusOverwritten","window","setTimeout","useEffect","url","method","body","JSON","stringify","clearTimeout","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.783de341.chunk.js","sourcesContent":["import * as React from 'react';\nimport { RGB } from '../../models';\n\nexport interface IStatusProps {\n  status: string | null;\n  rgb: RGB | null;\n}\n\nexport const Status: React.FunctionComponent<IStatusProps> = (props: IStatusProps) => {\n\t\t\n\treturn (\n\t\t<>\n      <h2 className=\"font-weight-light text-center\">\n        {props.status ? (\n          <>\n            <span>Current status: </span>\n            <span className=\"badge badge-pill badge-primary\" style={{\n              backgroundColor: props.rgb ? `rgb(${props.rgb.red}, ${props.rgb.green}, ${props.rgb.blue})` : 'inherit'\n            }}>{props.status}</span>\n          </>\n        ) : `Busy Light`}  \n      </h2>\n    </>\n\t);\n};","import * as React from 'react';\n\nexport interface IStatusButtonProps {\n  apiUrl: string;\n  className: string;\n  text: string;\n  callApi: (url: string) => Promise<void>;\n}\n\nexport const StatusButton: React.FunctionComponent<IStatusButtonProps> = (props: IStatusButtonProps) => {\n  return (\n    <button className={`btn btn-lg btn-block ${props.className}`} onClick={() => props.callApi(props.apiUrl)}><b>{props.text}</b></button>\n  );\n};","import React from 'react';\nimport './App.css';\nimport { Status } from '../status';\nimport { RGB, StatusInfo } from '../../models';\nimport { StatusButton } from '../statusButton';\n\nexport function App() {\n  let timer: number | null = null;\n  const [status, setStatus] = React.useState<string | null>(null);\n\tconst [rgb, setRgb] = React.useState<RGB | null>(null);\n\tconst [overwritten, setStatusOverwritten] = React.useState<boolean>(false);\n\n  const fetchStatus = async () => {\n    const data = await fetch(`/api/status`);\n\n    if (data && data.ok) {\n      const statusInfo: StatusInfo = await data.json();\n      if (statusInfo && statusInfo.status) {\n        setStatus(statusInfo.status);\n        setRgb({\n          red: statusInfo.red,\n          green: statusInfo.green,\n          blue: statusInfo.blue,\n        });\n        setStatusOverwritten(!!statusInfo.statusOverwritten);\n      } else {\n        setStatus(null);\n        setRgb(null);\n      }\n    }\n\n    timer = window.setTimeout(() => {\n      fetchStatus();\n    }, (1 * 60 * 1000));\n  }\n\n\tReact.useEffect(() => {\n    fetchStatus();\n  }, []);\n\n  const callApi = async (url: string) => {\n    if (url) {\n      const data = await fetch(url, { method: \"POST\", body: JSON.stringify({}) });\n      if (data && data.ok) {\n        if (timer) {\n          clearTimeout(timer);\n        }\n        fetchStatus();\n      }\n    }\n  };\n  \n  return (\n    <div className=\"app container py-4\">\n      <section className=\"row\">\n\t\t\t  <div className=\"col\">\n\t\t\t    <Status status={status} rgb={rgb} />\n        </div>\n      </section>\n\n      <section className=\"row mt-4\">\n\t\t\t  <div className=\"col-sm-12 col-md-6 col-lg-3 mb-4\">\n\t\t\t    <StatusButton apiUrl={\"/api/available\"} className={\"btn-success\"} text={\"Available\"} callApi={callApi} />\n        </div>\n        <div className=\"col-sm-12 col-md-6 col-lg-3 mb-4\">\n\t\t\t    <StatusButton apiUrl={\"/api/busy\"} className={\"btn-danger\"} text={\"Busy\"} callApi={callApi} />\n        </div>\n        <div className=\"col-sm-12 col-md-6 col-lg-3 mb-4\">\n\t\t\t    <StatusButton apiUrl={\"/api/away\"} className={\"btn-warning\"} text={\"Away\"} callApi={callApi} />\n        </div>\n        <div className=\"col-sm-12 col-md-6 col-lg-3 mb-4\">\n\t\t\t    <StatusButton apiUrl={\"/api/rainbow\"} className={\"btn-secondary rainbow\"} text={\"Rainbow\"} callApi={callApi} />\n        </div>\n      </section>\n\n      <section className=\"row\">\n\t\t\t  <div className=\"col-sm-12 col-md-6 mb-4\">\n          <StatusButton apiUrl={\"/api/on\"} className={\"btn-outline-success\"} text={\"On\"} callApi={callApi} />\n        </div>\n        <div className=\"col-sm-12 col-md-6 mb-4\">\n          <StatusButton apiUrl={\"/api/off\"} className={\"btn-outline-dark\"} text={\"Off\"} callApi={callApi} />\n        </div>\n      </section>\n\n      {\n        overwritten && (\n          <section className=\"row mt-4\">\n            <div className=\"col\">\n              <StatusButton apiUrl={\"/api/reset\"} className={\"btn-outline-danger\"} text={\"Reset\"} callApi={callApi} />\n            </div>\n          </section>\n        )\n      }\n\t\t</div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();"],"sourceRoot":""}